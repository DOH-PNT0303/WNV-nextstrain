configfile: "config/defaults.yaml"


#send_slack_notifications = config.get("send_slack_notifications", False)

serotypes = ["all"]


def _get_all_targets(wildcards):
    # Default targets are the metadata TSV and sequences FASTA files
    all_targets = expand(
        ["data/sequences_{serotype}.fasta.zst", "data/metadata_{serotype}.tsv.zst"],
        serotype=serotypes,
    )

#    # Add additional targets based on upload config
#
#    for target, params in upload_config.items():
#        remote_file_names = params.get("remote_file_names", [])
#
#            print(
#                f"Skipping file upload for {target!r} because the number of",
#                "files to upload does not match the number of remote file names.",
#            )
#        elif len(remote_file_names) != len(set(remote_file_names)):
#            print(
#                f"Skipping file upload for {target!r} because there are duplicate remote file names."
#        elif not params.get("dst"):
#            print(
#                f"Skipping file upload for {target!r} because the destintion was not defined."
#            )
#        else:
#            all_targets.extend(
#                expand(
#                    [
#                        f"data/upload/{target}/{{file_to_upload}}-to-{{remote_file_name}}.done"
#                    ],
#                    zip,
#                    remote_file_name=remote_file_names,
#                )
#            )
#
#    # Add additional targets for Nextstrain's internal Slack notifications
#    if send_slack_notifications:
#        all_targets.extend(
#                "data/notify/genbank-record-change.done",
#                "data/notify/metadata-diff.done",
#            ]
#        )
#
#    if config.get("trigger_rebuild"):
#        all_targets.append("data/trigger/rebuild.done")

    return all_targets


rule all:
    input:
        _get_all_targets,

include: "rules/fetch_sequences.smk"
include: "rules/curate.smk"

# Allow users to import custom rules provided via the config.
# This allows users to run custom rules that can extend or override the workflow.
# A concrete example of using custom rules is the extension of the workflow with
# rules to support the Nextstrain automation that upload files and send internal
# Slack notifications.
# For extensions, the user will have to specify the custom rule targets when
# running the workflow.
# For overrides, the custom Snakefile will have to use the `ruleorder` directive
# to allow Snakemake to handle ambiguous rules
# https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#handling-ambiguous-rules


#if config.get("upload"):
#
#    include: "rules/upload.smk"


#if send_slack_notifications:
#
#    include: "rules/slack_notifications.smk"


#if config.get("trigger_rebuild"):
#
#    include: "rules/trigger_rebuild.smk"

if "custom_rules" in config:
    for rule_file in config["custom_rules"]:

        include: rule_file
